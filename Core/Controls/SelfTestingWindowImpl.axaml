<Window xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
		xmlns:abControls="using:CarinaStudio.Controls"
		xmlns:abConverters="using:CarinaStudio.Data.Converters"
		xmlns:controls="using:CarinaStudio.AppSuite.Controls"
		xmlns:testing="using:CarinaStudio.AppSuite.Testing"
        mc:Ignorable="d" d:DesignWidth="800" d:DesignHeight="450"
        x:Class="CarinaStudio.AppSuite.Controls.SelfTestingWindowImpl"
		CanResize="True"
		Classes="Dialog"
		Height="{StaticResource Double/SelfTestingWindow.Height}"
		MinHeight="{StaticResource Double/SelfTestingWindow.MinHeight}"
		MinWidth="{StaticResource Double/SelfTestingWindow.MinWidth}"
		SizeToContent="Manual"
		Topmost="True"
		Width="{StaticResource Double/SelfTestingWindow.Width}"
		WindowStartupLocation="CenterScreen">

	<DockPanel>

		<!-- Control buttons -->
		<Border Classes="Dialog_ControlButtonsPanel" DockPanel.Dock="Bottom">
			<StackPanel HorizontalAlignment="Center" Orientation="Horizontal">
				<Button Classes="Dialog_ControlButton" Command="{Binding $parent[Window].RunAllTestCases}" Content="{DynamicResource String/SelfTestingWindow.RunAllTestCases}"/>
				<Button Classes="Dialog_ControlButton" Command="{Binding $parent[Window].CancelAllTestCases}" Content="{DynamicResource String/SelfTestingWindow.CancelAllTestCases}"/>
			</StackPanel>
		</Border>

		<!-- Content -->
		<Grid Classes="Dialog_ContentPanel" ColumnDefinitions="Auto,Auto,*" RowDefinitions="*,Auto,Auto">

			<!-- Test cases -->
			<TreeView Name="testCasesTreeView" Grid.ColumnSpan="3">
				<TreeView.DataTemplates>

					<!-- TestCaseCategroy -->
					<TreeDataTemplate DataType="{x:Type testing:TestCaseCategory}" ItemsSource="{Binding TestCases}">
						<Grid Name="rootPanel" Background="{x:Static Brushes.Transparent}" ColumnDefinitions="*,Auto">
							<Border Classes="InPlaceAction_Reserved"/>
							<abControls:FormattedTextBlock Arg1="{Binding Name}" Arg2="{Binding SucceededTestCaseCount}" Arg3="{Binding FailedTestCaseCount}" Arg4="{Binding TestCases.Count}" Format="{DynamicResource String/SelfTestingWindow.TestCaseCategoryInfo}"/>
							<StackPanel Grid.Column="1" IsVisible="{Binding #rootPanel.IsPointerOver}" Orientation="Horizontal">
								<Button Classes="InPlaceAction_Button" Command="{Binding $parent[Window].RunTestCasesInCategoryCommand}" CommandParameter="{Binding $parent[TreeViewItem]}" ToolTip.Tip="{DynamicResource String/SelfTestingWindow.RunTestCasesInCategory}">
									<controls:Image Classes="InPlaceAction_Icon">
										<DrawingImage>
											<GeometryDrawing Brush="{Binding $parent[TreeViewItem].Foreground}" Geometry="{StaticResource Geometry/Icon.PlayMedia}"/>
										</DrawingImage>
									</controls:Image>
								</Button>
							</StackPanel>
						</Grid>
					</TreeDataTemplate>

					<!-- TestCase -->
					<DataTemplate DataType="{x:Type testing:TestCase}">
						<Grid ColumnDefinitions="Auto,*,Auto" RowDefinitions="Auto,Auto">
							<Image Classes="TreeViewItem_Icon" Source="{Binding State, Converter={x:Static controls:SelfTestingWindowImpl.TestCaseIconConverter}}"/>
							<Border Classes="InPlaceAction_Reserved" Grid.Column="1"/>
							<TextBlock Classes="TreeViewItem_TextBlock" Grid.Column="1" Text="{Binding Name}"/>
							<StackPanel Grid.Column="2" IsVisible="{Binding $parent[TreeViewItem].IsPointerOver}" Orientation="Horizontal">
								<Button Classes="InPlaceAction_Button" Command="{Binding $parent[Window].RunTestCaseCommand}" CommandParameter="{Binding $parent[TreeViewItem]}" IsVisible="{Binding IsRunnable}" ToolTip.Tip="{DynamicResource String/SelfTestingWindow.RunTestCase}">
									<controls:Image Classes="InPlaceAction_Icon">
										<DrawingImage>
											<GeometryDrawing Brush="{Binding $parent[TreeViewItem].Foreground}" Geometry="{StaticResource Geometry/Icon.PlayMedia}"/>
										</DrawingImage>
									</controls:Image>
								</Button>
								<Button Classes="InPlaceAction_Button" Command="{Binding $parent[Window].CancelTestCaseCommand}" CommandParameter="{Binding $parent[TreeViewItem]}" IsVisible="{Binding IsCancellable}" ToolTip.Tip="{DynamicResource String/SelfTestingWindow.CancelTestCase}">
									<controls:Image Classes="InPlaceAction_Icon">
										<DrawingImage>
											<GeometryDrawing Brush="{Binding $parent[TreeViewItem].Foreground}" Geometry="{StaticResource Geometry/Icon.StopMedia}"/>
										</DrawingImage>
									</controls:Image>
								</Button>
							</StackPanel>
							<TextBlock Foreground="{DynamicResource Brush/Icon.Error}" Grid.Column="1" Grid.Row="1" IsVisible="{Binding Error, Converter={x:Static ObjectConverters.IsNotNull}}" Text="{Binding Error.Message}" TextTrimming="CharacterEllipsis"/>
						</Grid>
					</DataTemplate>

				</TreeView.DataTemplates>
			</TreeView>

			<!-- Test info -->
			<Separator Classes="Dialog_Separator" Grid.ColumnSpan="3" Grid.Row="1">
				<Separator.IsVisible>
					<MultiBinding Converter="{x:Static BoolConverters.Or}">
						<Binding Path="IsVisible" ElementName="runningTestCaseInfoTextBlock"/>
						<Binding Path="IsVisible" ElementName="waitingTestCasesInfoTextBlock"/>
					</MultiBinding>
				</Separator.IsVisible>
			</Separator>
			<abControls:FormattedTextBlock Name="runningTestCaseInfoTextBlock" Classes="Dialog_TextBlock" Arg1="{Binding RunningTestCase.Name, Source={x:Static testing:TestManager.Default}}" Format="{DynamicResource String/SelfTestingWindow.RunningTestCaseInfo}" Grid.Row="2" IsVisible="{Binding RunningTestCase, Source={x:Static testing:TestManager.Default}, Converter={x:Static ObjectConverters.IsNotNull}}"/>
			<Separator Classes="Dialog_Separator_Small" Grid.Column="1" Grid.Row="2" IsVisible="{Binding #runningTestCaseInfoTextBlock.IsVisible}"/>
			<abControls:FormattedTextBlock Name="waitingTestCasesInfoTextBlock" Classes="Dialog_TextBlock" Arg1="{Binding TestCaseWaitingCount, Source={x:Static testing:TestManager.Default}}" Format="{DynamicResource String/SelfTestingWindow.WaitingTestCasesInfo}" Grid.Column="2" Grid.Row="2" IsVisible="{Binding TestCaseWaitingCount, Source={x:Static testing:TestManager.Default}, Converter={x:Static abConverters:NumberConverters.IsNonZero}}"/>

		</Grid>
		
	</DockPanel>
	
</Window>
