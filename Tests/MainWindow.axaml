<Window xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
		xmlns:abControls="using:CarinaStudio.Controls"
		xmlns:abConverters="using:CarinaStudio.Data.Converters"
		xmlns:aConverters="using:Avalonia.Data.Converters"
		xmlns:app="using:CarinaStudio.AppSuite"
		xmlns:appControls="using:CarinaStudio.AppSuite.Controls"
		xmlns:appConverters="using:CarinaStudio.AppSuite.Converters"
        xmlns:appMedia="using:CarinaStudio.AppSuite.Media"
		xmlns:sys="using:System"
        mc:Ignorable="d" d:DesignWidth="800" d:DesignHeight="450"
        x:Class="CarinaStudio.AppSuite.Tests.MainWindow"
		Classes="Tabbed"
		ClipToBounds="False"
		Icon="/AppIcon.ico"
        Title="{DynamicResource String/TestMainWIndow.Title}">
	
	<Window.Resources>
		<sys:String x:Key="String/MessageDialog.Message">This is a message dialog!</sys:String>
		<sys:String x:Key="String/MessageDialog.Result">The result is {0}</sys:String>
		
		<ContextMenu x:Key="contextMenu" Placement="Bottom">
			<MenuItem Command="{Binding $parent[Window].LayoutMainWindowsCommand}" CommandParameter="{x:Static appControls:MultiWindowLayout.Horizontal}" Header="{DynamicResource String/MainWindow.LayoutMainWindows.Horizontal}">
				<MenuItem.Icon>
					<Image Classes="Icon" Source="{DynamicResource Image/Icon.Layout.Horizontal}"/>
				</MenuItem.Icon>
			</MenuItem>
			<MenuItem Command="{Binding $parent[Window].LayoutMainWindowsCommand}" CommandParameter="{x:Static appControls:MultiWindowLayout.Vertical}" Header="{DynamicResource String/MainWindow.LayoutMainWindows.Vertical}">
				<MenuItem.Icon>
					<Image Classes="Icon" Source="{DynamicResource Image/Icon.Layout.Vertical}"/>
				</MenuItem.Icon>
			</MenuItem>
			<MenuItem Command="{Binding $parent[Window].LayoutMainWindowsCommand}" CommandParameter="{x:Static appControls:MultiWindowLayout.Tile}" Header="{DynamicResource String/MainWindow.LayoutMainWindows.Tile}">
				<MenuItem.Icon>
					<Image Classes="Icon" Source="{DynamicResource Image/Icon.Layout.Tile}"/>
				</MenuItem.Icon>
			</MenuItem>
			<Separator/>
			<MenuItem Header="Item" InputGesture="Ctrl+Z">
				<MenuItem.Icon>
					<Image Classes="MenuItem_Icon" Source="{DynamicResource Image/Icon.OK}"/>
				</MenuItem.Icon>
			</MenuItem>
			<Separator/>
			<MenuItem Header="Item" IsEnabled="False">
				<MenuItem.Icon>
					<Image Classes="MenuItem_Icon" Source="{DynamicResource Image/Icon.Update}"/>
				</MenuItem.Icon>
			</MenuItem>
			<MenuItem Header="Item">
				<MenuItem Header="Sub Item"/>
				<MenuItem Header="Sub Item"/>
				<Separator/>
				<MenuItem Header="Sub Item"/>
				<MenuItem Header="Sub Item"/>
			</MenuItem>
			<MenuItem Header="Item"/>
		</ContextMenu>
	</Window.Resources>
	
	<Window.Styles>
		<Style Selector="CaptionButtons">
			<Setter Property="MaxHeight" Value="{Binding $parent[Window].ExtendClientAreaTitleBarHeightHint}"/>
		</Style>
	</Window.Styles>

	<Window.ExtendClientAreaTitleBarHeightHint>
		<MultiBinding Converter="{x:Static abConverters:DoubleConverters.Addition}">
			<Binding ElementName="tabControl" Path="TabStripSize"/>
			<Binding RelativeSource="{RelativeSource Mode=Self}" Path="ContentPadding.Top"/>
		</MultiBinding>
	</Window.ExtendClientAreaTitleBarHeightHint>

	<DockPanel ClipToBounds="False">

		<!-- Status bar -->
		<Panel DockPanel.Dock="Bottom">
			<Border Classes="StatusBar">
				<StackPanel Orientation="Horizontal">
					<TextBlock Classes="StatusBar_TextBlock" Text="{DynamicResource String/Common.OK}"/>
					<Separator Classes="StatusBar_Separator"/>
					<TextBlock Classes="StatusBar_TextBlock" Text="{DynamicResource String/Common.Cancel}"/>

					<Separator Classes="StatusBar_Separator"/>
					<Image Classes="StatusBar_Icon">
						<DrawingImage>
							<GeometryDrawing Brush="{StaticResource Brush/StatusBar.Foreground}" Geometry="{DynamicResource Geometry/Icon.File.Text.Outline}"/>
						</DrawingImage>
					</Image>

					<Separator Classes="StatusBar_Separator"/>
					<Image Classes="StatusBar_IconWithText">
						<DrawingImage>
							<GeometryDrawing Brush="{StaticResource Brush/StatusBar.Foreground}" Geometry="{DynamicResource Geometry/Icon.Folder.Outline}"/>
						</DrawingImage>
					</Image>
					<TextBlock Classes="StatusBar_TextBlock" Text="Text of icon"/>
					
					<Separator Classes="StatusBar_Separator"/>
					<abControls:ProgressRing Classes="StatusBar_ProgressRingWithText" IsIndeterminate="True"/>
					<TextBlock Classes="StatusBar_TextBlock" Text="Text of progress"/>

					<Separator Classes="StatusBar_Separator"/>
					<TextBlock Classes="StatusBar_TextBlock" Text="Text with arrow"/>
					<Image Classes="StatusBar_DropDownIcon">
						<DrawingImage>
							<GeometryDrawing Brush="{StaticResource Brush/StatusBar.Foreground}" Geometry="{DynamicResource Geometry/Icon.DropDown.Up}"/>
						</DrawingImage>
					</Image>

					<Separator Classes="StatusBar_Separator"/>
					<Button Classes="StatusBar_Button">Button</Button>
					<Button Classes="StatusBar_Button" IsEnabled="False">Button</Button>

					<Separator Classes="StatusBar_Separator"/>
					<ToggleButton Classes="StatusBar_ToggleButton">ToggleButton</ToggleButton>
					<ToggleButton Classes="StatusBar_ToggleButton" IsEnabled="False">ToggleButton</ToggleButton>
					<ToggleButton Classes="StatusBar_ToggleButton" IsChecked="True" IsEnabled="False">ToggleButton</ToggleButton>

					<Separator Classes="StatusBar_Separator"/>
					<RepeatButton Classes="StatusBar_RepeatButton">RepeatButton</RepeatButton>
					<RepeatButton Classes="StatusBar_RepeatButton" IsEnabled="False">RepeatButton</RepeatButton>
				</StackPanel>
			</Border>
			<Line Classes="Shadow" Stroke="{DynamicResource Brush/StatusBar.Border}" VerticalAlignment="Top"/>
		</Panel>

		<Panel ClipToBounds="False">
			<appControls:TabControl Name="tabControl" DragDrop.AllowDrop="True" DragEnterItem="OnDragEnterTabItem" DragLeaveItem="OnDragLeaveTabItem" DragOverItem="OnDragOverTabItem" DropOnItem="OnDropOnTabItem" ItemDragged="OnTabItemDragged">

				<appControls:TabItem>

					<TabItem.Header>
						<Grid ColumnDefinitions="Auto,*,Auto" ToolTip.Tip="This is tooltip">
							<Image Classes="TabItem_Icon" IsEnabled="{Binding $parent[TabItem].IsSelected}" Source="{DynamicResource Image/Icon.File}"/>
							<TextBlock Classes="TabItem_TextBlock" Grid.Column="1" Text="Item 1 Item 1 Item 1 Item 1 kkkkkkkkkkkkkkkkk"/>
							<Button Classes="TabItem_Button" Command="{Binding $parent[Window].Test}" Grid.Column="2">
								<Image Classes="Icon" Source="{StaticResource Image/Icon.Folder}"/>
							</Button>
						</Grid>
					</TabItem.Header>

					<ScrollViewer Name="scrollViewer" Background="{DynamicResource Brush/WorkingArea.Background}" HorizontalAlignment="Stretch" HorizontalScrollBarVisibility="Disabled">
						<StackPanel Background="{x:Static Brushes.Transparent}" HorizontalAlignment="Stretch" Orientation="Vertical">

							<StackPanel.ContextMenu>
								<ContextMenu>
									<MenuItem Command="{Binding $parent[Window].LayoutMainWindowsCommand}" CommandParameter="{x:Static appControls:MultiWindowLayout.Horizontal}" Header="{DynamicResource String/MainWindow.LayoutMainWindows.Horizontal}">
										<MenuItem.Icon>
											<Image Classes="Icon" Source="{DynamicResource Image/Icon.Layout.Horizontal}"/>
										</MenuItem.Icon>
									</MenuItem>
									<MenuItem Command="{Binding $parent[Window].LayoutMainWindowsCommand}" CommandParameter="{x:Static appControls:MultiWindowLayout.Vertical}" Header="{DynamicResource String/MainWindow.LayoutMainWindows.Vertical}">
										<MenuItem.Icon>
											<Image Classes="Icon" Source="{DynamicResource Image/Icon.Layout.Vertical}"/>
										</MenuItem.Icon>
									</MenuItem>
									<MenuItem Command="{Binding $parent[Window].LayoutMainWindowsCommand}" CommandParameter="{x:Static appControls:MultiWindowLayout.Tile}" Header="{DynamicResource String/MainWindow.LayoutMainWindows.Tile}">
										<MenuItem.Icon>
											<Image Classes="Icon" Source="{DynamicResource Image/Icon.Layout.Tile}"/>
										</MenuItem.Icon>
									</MenuItem>
									<Separator/>
									<MenuItem Header="Item" InputGesture="Ctrl+Z">
										<MenuItem.Icon>
											<Image Classes="MenuItem_Icon" Source="{DynamicResource Image/Icon.OK}"/>
										</MenuItem.Icon>
									</MenuItem>
									<Separator/>
									<MenuItem Header="Item">
										<MenuItem.Icon>
											<Border Background="Red" Height="30" Width="20"/>
										</MenuItem.Icon>
									</MenuItem>
									<MenuItem Header="Item" IsEnabled="False">
										<MenuItem.Icon>
											<Image Classes="MenuItem_Icon" Source="{DynamicResource Image/Icon.Update}"/>
										</MenuItem.Icon>
									</MenuItem>
									<MenuItem Header="Item">
										<MenuItem Header="Sub Item"/>
										<MenuItem Header="Sub Item"/>
										<Separator/>
										<MenuItem Header="Sub Item"/>
										<MenuItem Header="Sub Item"/>
									</MenuItem>
									<MenuItem Header="Item"/>
								</ContextMenu>
							</StackPanel.ContextMenu>

							<!-- Menu and ToolBar -->
							<Panel>
								<StackPanel>
									
									<Menu>

										<MenuItem Header="File">
											<MenuItem Header="Sub Item"/>
											<MenuItem Header="Sub Item"/>
											<Separator/>
											<MenuItem Header="Sub Item"/>
											<MenuItem Header="Sub Item"/>
										</MenuItem>

										<MenuItem Header="Edit">
											<MenuItem.Icon>
												<Image Classes="MenuItem_Icon" Source="{DynamicResource Image/Icon.Edit}"/>
											</MenuItem.Icon>
										</MenuItem>

									</Menu>

									<!-- Toolbar -->
									<Border Name="toolBar" BorderBrush="{DynamicResource Brush/ToolBar.Border}" BorderThickness="0,0,0,1" Classes="ToolBar">
										<appControls:ToolBarScrollViewer Name="toolBarScrollViewer">
											<Grid Background="{x:Static Brushes.Transparent}" ColumnDefinitions="Auto,*,Auto">
												<StackPanel HorizontalAlignment="Stretch" Orientation="Horizontal">

													<Button Classes="ToolBar_Button" Command="{Binding $parent[Window].ShowAppInfoDialogCommand}" ToolTip.Tip="Tool tip">
														<Image Classes="Icon" Source="{StaticResource Image/Icon.Panel.Right}"/>
													</Button>
													<Button Classes="ToolBar_Button" ToolTip.Tip="Tool tip">
														<Image Classes="Icon" Source="{StaticResource Image/Icon.Sliders}"/>
													</Button>
													<Button Classes="ToolBar_Button">
														<Image Classes="Icon" Source="{StaticResource Image/Icon.AddFile}"/>
													</Button>
													<Button Classes="ToolBar_Button" IsEnabled="{Binding #toolBarToggleButton.IsChecked}">
														<Image Classes="Icon" Source="{StaticResource Image/Icon.Error.Colored}"/>
													</Button>
													
													<abControls:ProgressRing Classes="ToolBar_ProgressRing" IsIndeterminate="True"/>

													<Button Classes="ToolBar_Button_WithDropDownButton">
														<Image Classes="Icon" Source="{StaticResource Image/Icon.Star}"/>
													</Button>
													<ToggleButton Classes="ToolBar_DropDownButton">
														<Panel>
															<Image Classes="ToolBar_DropDownButtonIcon" IsVisible="{Binding !$parent[ToggleButton].IsChecked}" Source="{StaticResource Image/Icon.DropDown.Down}"/>
															<Image Classes="ToolBar_DropDownButtonIcon" IsVisible="{Binding $parent[ToggleButton].IsChecked}" Source="{StaticResource Image/Icon.DropDown.Down.Light}"/>
														</Panel>
													</ToggleButton>

													<Panel>
														<TextBox Classes="ToolBar_TextBox" Width="100">
															<TextBox.InnerRightContent>
																<StackPanel Classes="TextBox_InPlaceActions">
																	<ToggleButton Classes="TextBox_InPlaceAction">
																		<Image Classes="Icon" Source="{DynamicResource Image/Icon.OpenFile}"/>
																	</ToggleButton>
																</StackPanel>
															</TextBox.InnerRightContent>
														</TextBox>
													</Panel>
													<TextBox Classes="ToolBar_TextBox" Width="50" IsEnabled="False"/>

													<ToggleButton Name="toolBarToggleButton" Classes="ToolBar_ToggleButton" ToolTip.Tip="This is tooltip">
														<Image Classes="Icon" Source="{StaticResource Image/Icon.OK.Colored}"/>
													</ToggleButton>

													<RepeatButton Classes="ToolBar_RepeatButton" ToolTip.Tip="This is tooltip">
														<Image Classes="Icon" Source="{StaticResource Image/Icon.Add}"/>
													</RepeatButton>

													<Separator Classes="ToolBar_Separator"/>

													<ToggleButton Classes="ToolBar_ToggleButton" IsEnabled="False">
														<Image Classes="Icon" Source="{StaticResource Image/Icon.SaveAll}"/>
													</ToggleButton>

													<ComboBox Classes="ToolBar_ComboBox" Width="100">
														12345
													</ComboBox>
													<ComboBox Classes="ToolBar_ComboBox" Width="100" IsEnabled="False">
														6789
													</ComboBox>

													<Button Classes="ToolBar_Button" Command="{Binding $parent[Window].ShowTutorialCommand}" CommandParameter="{Binding $self}">
														<Image Classes="Icon" Source="{StaticResource Image/Icon.Lightbulb}"/>
													</Button>

													<RepeatButton Classes="ToolBar_RepeatButton" IsEnabled="False">
														<Image Classes="Icon" Source="{StaticResource Image/Icon.Folder}"/>
													</RepeatButton>

													<TextBlock Classes="ToolBar_TextBlock" IsEnabled="False" Text="test:"/>
													
													<TextBox Classes="ToolBar_TextBox" IsEnabled="False" Text="Hello"/>

												</StackPanel>

												<TextBox Name="toolBarTextBox" Classes="ToolBar_TextBox" Grid.Column="1" Watermark="TextBox with in-place actions">
													<TextBox.InnerRightContent>
														<StackPanel Classes="TextBox_InPlaceActions">
															<Button Classes="TextBox_InPlaceAction">
																<Image Classes="Icon" Source="{DynamicResource Image/Icon.Save}"/>
															</Button>
															<Button Classes="TextBox_InPlaceAction">
																<Image Classes="Icon" Source="{DynamicResource Image/Icon.Close}"/>
															</Button>
														</StackPanel>
													</TextBox.InnerRightContent>
												</TextBox>

												<StackPanel Grid.Column="2" HorizontalAlignment="Stretch" Orientation="Horizontal">
													<Button Classes="ToolBar_Button">
														<Panel Classes="Icon">
															<Image Classes="Icon" Source="{DynamicResource Image/Icon.More}"/>
															<Border Classes="ToolBar_NotificationIndicator" IsVisible="{Binding $parent[Window].Application.UpdateInfo, Converter={x:Static aConverters:StringConverters.IsNotNullOrEmpty}}">
																<Image Classes="ToolBar_NotificationIndicator" Source="{StaticResource Image/Icon.Update.Colored}"/>
															</Border>
															<Border Classes="ToolBar_NotificationIndicator" IsVisible="{Binding !$parent[Window].Application.UpdateInfo, Converter={x:Static aConverters:StringConverters.IsNotNullOrEmpty}}">
																<Image Classes="ToolBar_NotificationIndicator" Source="{StaticResource Image/Icon.NotificationIndicator.Success}"/>
															</Border>
														</Panel>
													</Button>
												</StackPanel>
											</Grid>
										</appControls:ToolBarScrollViewer>
									</Border>
									
									<!-- Toolbar (Small) -->
									<Border Classes="ToolBar_Small" BorderBrush="{DynamicResource Brush/ToolBar.Border}" BorderThickness="0,0,0,1">
										<StackPanel Orientation="Horizontal">
											
											<Button Classes="ToolBar_Button_Small" Command="{Binding $parent[Window].ShowAppInfoDialogCommand}" ToolTip.Tip="Tool tip">
												<Image Classes="Icon" Source="{StaticResource Image/Icon.Panel.Right}"/>
											</Button>
											<Button Classes="ToolBar_Button_Small" ToolTip.Tip="Tool tip">
												<Image Classes="Icon" Source="{StaticResource Image/Icon.Sliders}"/>
											</Button>
											<Button Classes="ToolBar_Button_Small">
												<Image Classes="Icon" Source="{StaticResource Image/Icon.AddFile}"/>
											</Button>
											
											<Separator Classes="ToolBar_Separator_Small"/>
											
											<ToggleButton Classes="ToolBar_ToggleButton_Small" ToolTip.Tip="This is tooltip">
												<Image Classes="Icon" Source="{StaticResource Image/Icon.OK.Colored}"/>
											</ToggleButton>

											<RepeatButton Classes="ToolBar_RepeatButton_Small" ToolTip.Tip="This is tooltip">
												<Image Classes="Icon" Source="{StaticResource Image/Icon.Add}"/>
											</RepeatButton>
											
											<TextBlock Classes="ToolBar_TextBlock_Small" Text="Text"/>
											
											<RepeatButton Classes="ToolBar_RepeatButton_Small" ToolTip.Tip="This is tooltip">
												<Image Classes="Icon" Source="{StaticResource Image/Icon.File.Outline}"/>
											</RepeatButton>
											
										</StackPanel>
									</Border>
									
								</StackPanel>
								<Line Classes="Shadow" Stroke="{DynamicResource Brush/ToolBar.Border}" VerticalAlignment="Bottom"/>
							</Panel>
							<Border Classes="Shadow_Bottom_Light"/>

							<!-- Accent colors -->
							<StackPanel Height="30" Margin="5" Orientation="Horizontal">
								<Border Width="30">
									<Border.Background>
										<SolidColorBrush Color="{DynamicResource SystemAccentColorLight3}"/>
									</Border.Background>
								</Border>
								<Border Width="30">
									<Border.Background>
										<SolidColorBrush Color="{DynamicResource SystemAccentColorLight2}"/>
									</Border.Background>
								</Border>
								<Border Width="30">
									<Border.Background>
										<SolidColorBrush Color="{DynamicResource SystemAccentColorLight1}"/>
									</Border.Background>
								</Border>
								<Border Width="30">
									<Border.Background>
										<SolidColorBrush Color="{DynamicResource SystemAccentColor}"/>
									</Border.Background>
								</Border>
								<Border Width="30">
									<Border.Background>
										<SolidColorBrush Color="{DynamicResource SystemAccentColorDark1}"/>
									</Border.Background>
								</Border>
								<Border Width="30">
									<Border.Background>
										<SolidColorBrush Color="{DynamicResource SystemAccentColorDark2}"/>
									</Border.Background>
								</Border>
								<Border Width="30">
									<Border.Background>
										<SolidColorBrush Color="{DynamicResource SystemAccentColorDark3}"/>
									</Border.Background>
								</Border>
							</StackPanel>

							<Button Name="testButton1" Command="{Binding $parent[Window].Test}" Margin="5" ToolTip.Tip="{DynamicResource String/Common.Copy.WithGesture}">
								<TextBlock Background="Red" BaselineOffset="5" Text="ABC abjg 中文"/>
							</Button>
							<Button Command="{Binding $parent[Window].Test2}" Content="Test2" Margin="5"/>
							
							<!-- Shadows -->
							<WrapPanel>
								<Panel Height="100" HorizontalAlignment="Left" Margin="5" Width="100">
									<Line Classes="Shadow" HorizontalAlignment="Stretch" VerticalAlignment="Top"/>
									<Line Classes="Shadow" HorizontalAlignment="Stretch" VerticalAlignment="Bottom"/>
									<Line Classes="Shadow" HorizontalAlignment="Left" VerticalAlignment="Stretch"/>
									<Line Classes="Shadow" HorizontalAlignment="Right" VerticalAlignment="Stretch"/>
								</Panel>
								<Border Background="{x:Static Brushes.White}" BoxShadow="{DynamicResource BoxShadows/Shadow.Light}" CornerRadius="5" Height="100" Margin="5,5,0,5" Width="100"/>
								<Border Background="{x:Static Brushes.White}" BoxShadow="{DynamicResource BoxShadows/Shadow}" CornerRadius="5" Height="100" Margin="20,5,0,5" Width="100"/>
								<Border Background="{x:Static Brushes.White}" BoxShadow="{DynamicResource BoxShadows/Shadow.Heavy}" CornerRadius="5" Height="100" Margin="30,5,0,5" Width="100"/>
								<Border Background="{x:Static Brushes.White}" BoxShadow="{DynamicResource BoxShadows/Shadow.Inner.Light}" CornerRadius="5" Height="100" Margin="25,5,5,5" Width="100"/>
								<Border Background="{x:Static Brushes.White}" BoxShadow="{DynamicResource BoxShadows/Shadow.Inner}" CornerRadius="5" Height="100" Margin="5" Width="100"/>
								<Border Background="{x:Static Brushes.White}" BoxShadow="{DynamicResource BoxShadows/Shadow.Inner.Heavy}" CornerRadius="5" Height="100" Margin="5" Width="100"/>
								<Grid Margin="30,0,0,0" ColumnDefinitions="Auto,100,Auto" RowDefinitions="Auto,100,Auto">
									<Border Background="{x:Static Brushes.White}" Grid.Column="1" Grid.Row="1"/>
									<Border Classes="Shadow_TopLeft_Outer_Light" Grid.Column="0" Grid.Row="0"/>
									<Border Classes="Shadow_TopRight_Outer_Light" Grid.Column="2" Grid.Row="0"/>
									<Border Classes="Shadow_BottomLeft_Outer_Light" Grid.Column="0" Grid.Row="2"/>
									<Border Classes="Shadow_BottomRight_Outer_Light" Grid.Column="2" Grid.Row="2"/>
									<Border Classes="Shadow_Left_Light" Grid.Column="0" Grid.Row="1"/>
									<Border Classes="Shadow_Top_Light" Grid.Column="1" Grid.Row="0"/>
									<Border Classes="Shadow_Right_Light" Grid.Column="2" Grid.Row="1"/>
									<Border Classes="Shadow_Bottom_Light" Grid.Column="1" Grid.Row="2"/>
								</Grid>
								<Grid Margin="20,0,0,0" ColumnDefinitions="Auto,100,Auto" RowDefinitions="Auto,100,Auto">
									<Border Background="{x:Static Brushes.White}" Grid.Column="1" Grid.Row="1"/>
									<Border Classes="Shadow_TopLeft_Outer" Grid.Column="0" Grid.Row="0"/>
									<Border Classes="Shadow_TopRight_Outer" Grid.Column="2" Grid.Row="0"/>
									<Border Classes="Shadow_BottomLeft_Outer" Grid.Column="0" Grid.Row="2"/>
									<Border Classes="Shadow_BottomRight_Outer" Grid.Column="2" Grid.Row="2"/>
									<Border Classes="Shadow_Left" Grid.Column="0" Grid.Row="1"/>
									<Border Classes="Shadow_Top" Grid.Column="1" Grid.Row="0"/>
									<Border Classes="Shadow_Right" Grid.Column="2" Grid.Row="1"/>
									<Border Classes="Shadow_Bottom" Grid.Column="1" Grid.Row="2"/>
								</Grid>
								<Grid Margin="30,0,0,0" ColumnDefinitions="Auto,100,Auto" RowDefinitions="Auto,100,Auto">
									<Border Background="{x:Static Brushes.White}" Grid.Column="1" Grid.Row="1"/>
									<Border Classes="Shadow_TopLeft_Outer_Heavy" Grid.Column="0" Grid.Row="0"/>
									<Border Classes="Shadow_TopRight_Outer_Heavy" Grid.Column="2" Grid.Row="0"/>
									<Border Classes="Shadow_BottomLeft_Outer_Heavy" Grid.Column="0" Grid.Row="2"/>
									<Border Classes="Shadow_BottomRight_Outer_Heavy" Grid.Column="2" Grid.Row="2"/>
									<Border Classes="Shadow_Left_Heavy" Grid.Column="0" Grid.Row="1"/>
									<Border Classes="Shadow_Top_Heavy" Grid.Column="1" Grid.Row="0"/>
									<Border Classes="Shadow_Right_Heavy" Grid.Column="2" Grid.Row="1"/>
									<Border Classes="Shadow_Bottom_Heavy" Grid.Column="1" Grid.Row="2"/>
								</Grid>
							</WrapPanel>

							<ScrollBar AllowAutoHide="False" HorizontalAlignment="Left" Margin="5" Orientation="Horizontal" ViewportSize="10" Width="300"/>

							<TextBlock Text="{DynamicResource String/ApplicationOptions.LogOutputTargetPort}" Margin="5,5,5,0"/>
							<NumericUpDown HorizontalAlignment="Left" Maximum="65535" Minimum="1" Value="{Binding $parent[Window].ApplicationOptions.LogOutputTargetPort, Mode=TwoWay}" Width="150"/>

							<Panel HorizontalAlignment="Left" Margin="5">
								<Border Background="{DynamicResource Brush/WorkingArea.Panel.Background}" BorderBrush="{DynamicResource Brush/WorkingArea.Panel.Border}" BorderThickness="1" BoxShadow="{DynamicResource BoxShadows/Shadow.Light}" HorizontalAlignment="Left" Padding="5">
									<StackPanel>
										<TextBlock Text="{Binding ID, StringFormat={}ID:{0}}" Margin="5,0,0,0"/>
										<TextBlock Text="{Binding $parent[Window].Application.ProcessInfo.ProcessId, StringFormat={}PID: {0}}" Margin="5,5,0,0"/>
										<SelectableTextBlock Focusable="True" Text="" Margin="5,5,0,0">
											<Run Text="CPU: "/>
											<Run FontWeight="Bold" Foreground="Green" Text="{Binding $parent[Window].Application.ProcessInfo.CpuUsagePercentage, StringFormat={}{0:F2}%}"/>
										</SelectableTextBlock>
										<TextBlock Text="{Binding $parent[Window].Application.ProcessInfo.PrivateMemoryUsage, Converter={x:Static appConverters:FileSizeConverter.Default}, StringFormat={}Memory Usage: {0}}" Margin="5,5,0,0"/>
										<TextBlock Text="{Binding $parent[Window].Application.ProcessInfo.ManagedHeapSize, Converter={x:Static appConverters:FileSizeConverter.Default}, StringFormat={}Managed Heap Size: {0}}" Margin="5,5,0,0"/>
										<TextBlock Text="{Binding $parent[Window].Application.ProcessInfo.ManagedHeapUsage, Converter={x:Static appConverters:FileSizeConverter.Default}, StringFormat={}Managed Heap Usage: {0}}" Margin="5,5,0,0"/>
										<TextBlock Text="{Binding $parent[Window].Application.ProcessInfo.FinalizationPendingCount, StringFormat={}Finalization Pending Count: {0}}" Margin="5,5,0,0"/>
										<TextBlock Text="{Binding $parent[Window].Application.ProcessInfo.GCFrequency, StringFormat={}GC Frequency: {0:F2}}" Margin="5,5,0,0"/>
										<TextBlock Text="{Binding $parent[Window].ApplicationOptions.CustomScreenScaleFactor, StringFormat={}{0:F2}}" Margin="5,5,0,0"/>
										<Slider IsEnabled="{Binding $parent[Window].ApplicationOptions.IsCustomScreenScaleFactorSupported, Mode=OneTime}" Margin="5,5,0,0" Maximum="{Binding $parent[Window].ApplicationOptions.MaxCustomScreenScaleFactor, Mode=OneTime}" Minimum="1" TickFrequency="{Binding $parent[Window].ApplicationOptions.CustomScreenScaleFactorGranularity, Mode=OneTime}" TickPlacement="Outside" Value="{Binding $parent[Window].ApplicationOptions.CustomScreenScaleFactor, Mode=TwoWay}" Width="200"/>
										<TextBlock Text="{Binding $parent[Window].ActualTransparencyLevel}" Margin="5,5,0,0"/>
										<TextBlock Text="{Binding $parent[Window].Application.IsDebugMode, StringFormat={}IsDebugMode: {0}}" Margin="5,5,0,0"/>
									</StackPanel>
								</Border>
							</Panel>

							<abControls:IntegerTextBox Name="integerTextBox" HorizontalAlignment="Left" IsNullValueAllowed="False" Margin="5,5,0,0" Minimum="1" Width="200" Watermark="Integer"/>
							<TextBlock Text="{Binding #integerTextBox.Value, StringFormat={}Value: {0}}" HorizontalAlignment="Left" Margin="5,0,0,5"/>

							<abControls:FormattedTextBlock Arg1="{Binding #regexTextBox.HasOpenedAssistanceMenus}" Format="{}HasOpenedAssistanceMenus: {0}" Margin="5,5,5,2"/>
							<appControls:RegexTextBox Name="regexTextBox" Height="300" HorizontalAlignment="Left" Margin="5" TextWrapping="Wrap" Width="300">
								<appControls:RegexTextBox.PredefinedGroups>
									<appControls:RegexGroup Name="Group1"/>
									<appControls:RegexGroup Name="Group2"/>
									<appControls:RegexGroup Name="Hello" DisplayName="{DynamicResource String/Common.OK}"/>
									<appControls:RegexGroup Name="World" DisplayName="{DynamicResource String/Common.Cancel}"/>
									<appControls:RegexGroup Name="Group3"/>
									<appControls:RegexGroup Name="Group4"/>
									<appControls:RegexGroup Name="Group5"/>
									<appControls:RegexGroup Name="Group6"/>
									<appControls:RegexGroup Name="Group7"/>
									<appControls:RegexGroup Name="Group8"/>
									<appControls:RegexGroup Name="Group9"/>
									<appControls:RegexGroup Name="Group10"/>
									<appControls:RegexGroup Name="Group11"/>
									<appControls:RegexGroup Name="Group12"/>
									<appControls:RegexGroup Name="Group13"/>
									<appControls:RegexGroup Name="Group14"/>
									<appControls:RegexGroup Name="Group15"/>
									<appControls:RegexGroup Name="Group16"/>
									<appControls:RegexGroup Name="Group17"/>
									<appControls:RegexGroup Name="Group18"/>
									<appControls:RegexGroup Name="Group19"/>
									<appControls:RegexGroup Name="Group20"/>
									<appControls:RegexGroup Name="Group21"/>
									<appControls:RegexGroup Name="Group22"/>
									<appControls:RegexGroup Name="Group23"/>
									<appControls:RegexGroup Name="Group24"/>
									<appControls:RegexGroup Name="Group25"/>
									<appControls:RegexGroup Name="Group26"/>
									<appControls:RegexGroup Name="Group27"/>
									<appControls:RegexGroup Name="Group28"/>
									<appControls:RegexGroup Name="Group29"/>
									<appControls:RegexGroup Name="Group30"/>
								</appControls:RegexTextBox.PredefinedGroups>
							</appControls:RegexTextBox>
							<appControls:RegexTextBox HorizontalAlignment="Left" Margin="5" Width="400"/>
							<appControls:RegexTextBox HorizontalAlignment="Left" IsReadOnly="True" Margin="5" Text="Read-Only RegexTextBox" Width="400"/>

							<abControls:FormattedTextBlock Arg1="{Binding #stringInterpolationFormatTextBox.HasOpenedAssistanceMenus}" Format="{}HasOpenedAssistanceMenus: {0}" Margin="5,5,5,2"/>
							<appControls:StringInterpolationFormatTextBox Name="stringInterpolationFormatTextBox" Height="60" HorizontalAlignment="Left" Margin="5" TextWrapping="Wrap" Watermark="String interpolation" Width="200">
								<appControls:StringInterpolationFormatTextBox.PredefinedVariables>
									<appControls:StringInterpolationVariable Name="Var1"/>
									<appControls:StringInterpolationVariable Name="Var2"/>
									<appControls:StringInterpolationVariable Name="Hello" DisplayName="{DynamicResource String/Common.OK}"/>
									<appControls:StringInterpolationVariable Name="World" DisplayName="{DynamicResource String/Common.Cancel}"/>
								</appControls:StringInterpolationFormatTextBox.PredefinedVariables>
							</appControls:StringInterpolationFormatTextBox>
							<appControls:StringInterpolationFormatTextBox HorizontalAlignment="Left" Margin="5" Watermark="String interpolation" Width="200"/>

							<appControls:DateTimeFormatTextBox HorizontalAlignment="Left" Margin="5" Width="250"/>

							<appControls:TimeSpanFormatTextBox HorizontalAlignment="Left" Margin="5" Width="250"/>

							<Border Background="{DynamicResource Brush/Accent}" CornerRadius="{DynamicResource ControlCornerRadius}" HorizontalAlignment="Left" Margin="5" Padding="10">
								<StackPanel Orientation="Horizontal">
									<Button Classes="InPlaceAction_Button">
										<Image Classes="InPlaceAction_Icon" Source="{DynamicResource Image/Icon.File}"/>
									</Button>
									<Button Classes="InPlaceAction_Button">
										<Image Classes="InPlaceAction_Icon" Source="{DynamicResource Image/Icon.OpenFile}"/>
									</Button>
									<Button Classes="InPlaceAction_Button">
										<Image Classes="InPlaceAction_Icon" Source="{DynamicResource Image/Icon.Save}"/>
									</Button>
									<Button Classes="InPlaceAction_Button" IsEnabled="False">
										<Image Classes="InPlaceAction_Icon" Source="{DynamicResource Image/Icon.SaveAll}"/>
									</Button>
									<ToggleButton Classes="InPlaceAction_ToggleButton" IsEnabled="False">
										<Image Classes="InPlaceAction_Icon" Source="{DynamicResource Image/Icon.More}"/>
									</ToggleButton>
									<ToggleButton Classes="InPlaceAction_ToggleButton" IsChecked="True" IsEnabled="False">
										<Image Classes="InPlaceAction_Icon" Source="{DynamicResource Image/Icon.More}"/>
									</ToggleButton>
									<ToggleButton Classes="InPlaceAction_ToggleButton">
										<Image Classes="InPlaceAction_Icon" Source="{DynamicResource Image/Icon.More}"/>
									</ToggleButton>
								</StackPanel>
							</Border>

							<!-- In-place actions -->
							<Border Background="{DynamicResource Brush/Accent}" CornerRadius="{DynamicResource ControlCornerRadius}" HorizontalAlignment="Left" Margin="5" Padding="10">
								<StackPanel Orientation="Horizontal">
									<Button Classes="InPlaceAction_Button_Medium">
										<Image Classes="InPlaceAction_Icon_Medium" Source="{DynamicResource Image/Icon.File}"/>
									</Button>
									<Button Classes="InPlaceAction_Button_Medium">
										<Image Classes="InPlaceAction_Icon_Medium" Source="{DynamicResource Image/Icon.OpenFile}"/>
									</Button>
									<Button Classes="InPlaceAction_Button_Medium">
										<Image Classes="InPlaceAction_Icon_Medium" Source="{DynamicResource Image/Icon.Save}"/>
									</Button>
									<Button Classes="InPlaceAction_Button_Medium" IsEnabled="False">
										<Image Classes="InPlaceAction_Icon_Medium" Source="{DynamicResource Image/Icon.SaveAll}"/>
									</Button>
									<ToggleButton Classes="InPlaceAction_ToggleButton_Medium" IsEnabled="False">
										<Image Classes="InPlaceAction_Icon_Medium" Source="{DynamicResource Image/Icon.More}"/>
									</ToggleButton>
									<ToggleButton Classes="InPlaceAction_ToggleButton_Medium" IsChecked="True" IsEnabled="False">
										<Image Classes="InPlaceAction_Icon_Medium" Source="{DynamicResource Image/Icon.More}"/>
									</ToggleButton>
									<ToggleButton Classes="InPlaceAction_ToggleButton_Medium">
										<Image Classes="InPlaceAction_Icon_Medium" Source="{DynamicResource Image/Icon.More}"/>
									</ToggleButton>
								</StackPanel>
							</Border>
							<Border Background="{DynamicResource Brush/Accent}" CornerRadius="{DynamicResource ControlCornerRadius}" HorizontalAlignment="Left" Margin="5" Padding="10">
								<StackPanel Orientation="Horizontal">
									<Button Classes="InPlaceAction_Button_Large">
										<appControls:Image Classes="InPlaceAction_Icon_Large" Source="{DynamicResource Image/Icon.File}"/>
									</Button>
									<Button Classes="InPlaceAction_Button_Large">
										<appControls:Image Classes="InPlaceAction_Icon_Large" Source="{DynamicResource Image/Icon.OpenFile}"/>
									</Button>
									<Button Classes="InPlaceAction_Button_Large">
										<appControls:Image Classes="InPlaceAction_Icon_Large" Source="{DynamicResource Image/Icon.Save}"/>
									</Button>
									<Button Classes="InPlaceAction_Button_Large" IsEnabled="False">
										<appControls:Image Classes="InPlaceAction_Icon_Large" Source="{DynamicResource Image/Icon.SaveAll}"/>
									</Button>
									<ToggleButton Classes="InPlaceAction_ToggleButton_Large" IsEnabled="False">
										<appControls:Image Classes="InPlaceAction_Icon_Large" Source="{DynamicResource Image/Icon.More}"/>
									</ToggleButton>
									<ToggleButton Classes="InPlaceAction_ToggleButton_Large" IsChecked="True" IsEnabled="False">
										<appControls:Image Classes="InPlaceAction_Icon_Large" Source="{DynamicResource Image/Icon.More}"/>
									</ToggleButton>
									<ToggleButton Classes="InPlaceAction_ToggleButton_Large">
										<appControls:Image Classes="InPlaceAction_Icon_Large" Source="{DynamicResource Image/Icon.More}"/>
									</ToggleButton>
								</StackPanel>
							</Border>
							
							<!-- Buttons -->
							<WrapPanel Name="buttonsPanel" Background="{DynamicResource MenuFlyoutPresenterBackground}" Orientation="Horizontal" >
								<Button Content="Button" Margin="5"/>
								<Button Content="Button" IsEnabled="False" Margin="5"/>
								<Button Classes="accent" Content="Button" Margin="5"/>
								<Button Classes="accent" Content="Button" IsEnabled="False" Margin="5"/>
								<Button Margin="5">
									<Grid ColumnDefinitions="Auto,*">
										<PathIcon Data=""/>
										<Image Classes="Button_Icon" Source="{DynamicResource Image/Icon.Folder.Outline}"/>
										<TextBlock Classes="Button_Text" Grid.Column="1" Text="Button"/>
									</Grid>
								</Button>
								<Button IsEnabled="False" Margin="5">
									<Grid ColumnDefinitions="Auto,*">
										<Image Classes="Button_Icon" Source="{DynamicResource Image/Icon.File.Outline}"/>
										<TextBlock Classes="Button_Text" Grid.Column="1" Text="Button"/>
									</Grid>
								</Button>
								<Button Margin="5">
									<Grid ColumnDefinitions="*,Auto">
										<TextBlock Classes="Button_Text" Text="Button"/>
										<Image Classes="Button_DropDownIcon" Grid.Column="1" Source="{DynamicResource Image/Icon.DropDown.Down}"/>
									</Grid>
								</Button>
								<Button IsEnabled="False" Margin="5">
									<Grid ColumnDefinitions="*,Auto">
										<TextBlock Classes="Button_Text" Text="Button"/>
										<Image Classes="Button_DropDownIcon" Grid.Column="1" Source="{DynamicResource Image/Icon.DropDown.Down}"/>
									</Grid>
								</Button>
								<ToggleButton Content="ToggleButton" Margin="5"/>
								<ToggleButton Content="ToggleButton" IsEnabled="False" Margin="5"/>
								<ToggleButton Content="ToggleButton" IsChecked="True" IsEnabled="False" Margin="5"/>
								<RepeatButton Content="RepeatButton" Margin="5"/>
								<RepeatButton Content="RepeatButton" IsEnabled="False" Margin="5"/>
							</WrapPanel>

							<WrapPanel Orientation="Horizontal">
								<ToggleSwitch Margin="5"/>
								<ToggleSwitch IsEnabled="False" Margin="5"/>
								<ToggleSwitch IsChecked="True" IsEnabled="False" Margin="5"/>
							</WrapPanel>

							<WrapPanel Orientation="Horizontal">
								<CheckBox Content="CheckBox" Margin="5"/>
								<CheckBox Content="Disabled" IsEnabled="False" Margin="5"/>
								<CheckBox Content="Disabled" IsChecked="True" IsEnabled="False" Margin="5"/>
								<CheckBox Content="Indeternimate" IsChecked="{x:Null}" Margin="5"/>
							</WrapPanel>

							<WrapPanel Orientation="Horizontal">
								<RadioButton Content="RadioButton" Margin="5"/>
								<RadioButton Content="Disabled" IsEnabled="False" Margin="5"/>
								<RadioButton Content="Disabled" IsChecked="True" IsEnabled="False" Margin="5"/>
								<RadioButton Content="Indeternimate" IsChecked="{x:Null}" Margin="5"/>
							</WrapPanel>

							<NumericUpDown HorizontalAlignment="Left" Maximum="100" Minimum="0" Margin="5" Value="50" Width="150"/>

							<!-- Test actions -->
							<WrapPanel Orientation="Horizontal">
								<Button Command="{Binding $parent[Window].ShowAppInfoDialog}" Content="App Info" Margin="5"/>
								<Button Command="{Binding $parent[Window].ShowAppUpdateDialog}" Content="App Update" Margin="5"/>
								<Button Command="{Binding $parent[Window].ShowMessageDialog}" Content="MessageDialog" Margin="5"/>
								<Button Command="{Binding $parent[Window].ShowTextInputDialog}" Content="TextInputDialog" Margin="5"/>
								<Button Command="{Binding $parent[Window].ShowNotification}" Content="Show Notification" Margin="5"/>
								<Button Command="{Binding $parent[Window].ShowExternalDependenciesDialog}" Content="External Dependencies" Margin="5"/>
								<Button Command="{Binding $parent[Window].ShowTestDialog}" Content="Test Dialog" Margin="5"/>
								<Button Command="{Binding $parent[Window].FindCommandPath}" Content="Find command path" Margin="5"/>
								<Button Command="{Binding $parent[Window].UpdateTaskbarIconProgressState}" Content="Update Taskbar icon progress" Margin="5"/>
								<Button Command="{Binding $parent[Window].Application.ShowMainWindowAsync}" Content="Open New Window" Margin="5"/>
								<Button Command="{Binding $parent[Window].RestartApp}" Content="Restart App" Margin="5"/>
								<Button Command="{Binding $parent[Window].EditConfiguration}" Content="Edit Configuration" Margin="5"/>
								<Button Command="{Binding $parent[Window].Application.ShowSelfTestingWindow}" Content="Self Testing" Margin="5"/>
								<Button Command="{Binding $parent[Window].Shutdown}" Content="Shutdown" Margin="5"/>
							</WrapPanel>

							<abControls:LinkTextBlock HorizontalAlignment="Left" IsEnabled="False" Margin="5" Text="Google" Uri="http://www.google.com/"/>
							<abControls:LinkTextBlock Command="{Binding $parent[Window].SwitchTheme}" HorizontalAlignment="Left" Margin="5" Text="Switch theme"/>
							<abControls:LinkTextBlock Command="{Binding $parent[Window].SwitchUsingCompactUI}" HorizontalAlignment="Left" Margin="5" Text="Switch compact UI"/>
							<abControls:LinkTextBlock Command="{Binding $parent[Window].SwitchAppCulture}" HorizontalAlignment="Left" Margin="5" Text="Switch application culture"/>

							<abControls:DateTimeTextBox Name="dateTimeTextBox" HorizontalAlignment="Left" Margin="5,5,0,0" Width="200"/>
							<TextBlock Margin="5,0,0,5" Text="{Binding #dateTimeTextBox.Value, StringFormat={}Value: {0}}"/>

							<abControls:IntegerTextBox Name="integerTextBox2" HorizontalAlignment="Left" Margin="5,5,0,0" Width="200" Watermark="Integer"/>
							<TextBlock Text="{Binding #integerTextBox2.Value, StringFormat={}Value: {0}}" HorizontalAlignment="Left" Margin="5,0,0,5"/>

							<appControls:EnumComboBox EnumType="{x:Type app:ThemeMode}" HorizontalAlignment="Left" Margin="5" Width="200"/>

							<TextBox Width="200" Margin="5" HorizontalAlignment="Left"/>
							<TextBox IsReadOnly="True" Text="Read-Only" Width="200" Margin="5" HorizontalAlignment="Left"/>
							<TextBox IsEnabled="False" Text="Disabled" Width="200" Margin="5" HorizontalAlignment="Left"/>

							<Border Width="30" Height="30" Margin="10" HorizontalAlignment="Left">
								<Image Classes="Icon" Source="{StaticResource Image/Icon.Folder}"/>
							</Border>

							<Border Width="30" Height="30" Margin="10" HorizontalAlignment="Left" IsEnabled="False">
								<Image Classes="Icon" Source="{StaticResource Image/Icon.Folder}"/>
							</Border>

							<appControls:ListBox DoubleClickOnItem="OnListBoxDoubleClickOnItem" HorizontalAlignment="Left" Width="150" Margin="5" SelectionMode="Multiple">
								<ListBoxItem>
									<appControls:SyntaxHighlightingTextBlock DefinitionSet="{Binding $parent[Window].RegexSyntaxHighlightingDefinitionSet}" Text="[0-9]abc(123)"/>
								</ListBoxItem>
								<ListBoxItem>
									<Grid ColumnDefinitions="*,Auto" HorizontalAlignment="Stretch">
										<TextBlock Text="Item 1" TextTrimming="CharacterEllipsis" VerticalAlignment="Center"/>
										<appControls:Image Classes="Icon" Grid.Column="1" Height="14" VerticalAlignment="Center" Width="14">
											<DrawingImage>
												<GeometryDrawing Brush="{Binding $parent[ListBoxItem].Foreground}" Geometry="{StaticResource Geometry/Icon.Star}"/>
											</DrawingImage>
										</appControls:Image>
									</Grid>
								</ListBoxItem>
								<ListBoxItem>Item 2 Item 2 Item 2 Item 2 Item 2</ListBoxItem>
								<ListBoxItem IsEnabled="False">Item 3</ListBoxItem>
								<ListBoxItem>Item 4 Item 4 Item 4 Item 4 Item 4</ListBoxItem>
							</appControls:ListBox>

							<appControls:ListBox HorizontalAlignment="Left" ItemsSource="{Binding $parent[Window].StringItems}" Width="150" Margin="5" SelectionMode="Multiple">
								<ListBox.ItemTemplate>
									<DataTemplate>
										<appControls:SyntaxHighlightingTextBlock DefinitionSet="{Binding $parent[Window].RegexSyntaxHighlightingDefinitionSet}" Text="{Binding}"/>
									</DataTemplate>
								</ListBox.ItemTemplate>
							</appControls:ListBox>

							<ComboBox HorizontalAlignment="Left" Width="200" Margin="5">
								<ComboBoxItem HorizontalAlignment="Stretch">
									<Grid ColumnDefinitions="Auto,*" HorizontalAlignment="Left" VerticalAlignment="Center">
										<appControls:Image Classes="ComboBoxItem_Icon">
											<DrawingImage>
												<GeometryDrawing Brush="{Binding $parent[ComboBoxItem].Foreground}" Geometry="{StaticResource Geometry/Icon.OK}"/>
											</DrawingImage>
										</appControls:Image>
										<TextBlock Classes="ComboBoxItem_TextBlock" Grid.Column="1" Text="Item"/>
									</Grid>
								</ComboBoxItem>
								<ComboBoxItem>2</ComboBoxItem>
								<ComboBoxItem>3</ComboBoxItem>
								<ComboBoxItem>4</ComboBoxItem>
								<ComboBoxItem>5</ComboBoxItem>
								<ComboBoxItem>6</ComboBoxItem>
								<ComboBoxItem>7</ComboBoxItem>
								<ComboBoxItem>8</ComboBoxItem>
								<ComboBoxItem>9</ComboBoxItem>
								<ComboBoxItem HorizontalAlignment="Stretch">
									<Grid ColumnDefinitions="Auto,*" HorizontalAlignment="Left" VerticalAlignment="Center">
										<appControls:Image Classes="ComboBoxItem_Icon">
											<DrawingImage>
												<GeometryDrawing Brush="{Binding $parent[ComboBoxItem].Foreground}" Geometry="{StaticResource Geometry/Icon.OK}"/>
											</DrawingImage>
										</appControls:Image>
										<TextBlock Classes="ComboBoxItem_TextBlock" Grid.Column="1" Text="10 looooooooooooooooooooog content"/>
									</Grid>
								</ComboBoxItem>
								<ComboBoxItem>11</ComboBoxItem>
								<ComboBoxItem>12</ComboBoxItem>
								<ComboBoxItem>13</ComboBoxItem>
								<ComboBoxItem>14</ComboBoxItem>
								<ComboBoxItem>15</ComboBoxItem>
								<ComboBoxItem>16</ComboBoxItem>
								<ComboBoxItem>17</ComboBoxItem>
								<ComboBoxItem>18</ComboBoxItem>
								<ComboBoxItem>19</ComboBoxItem>
								<ComboBoxItem>20</ComboBoxItem>
							</ComboBox>

							<abControls:TimeSpanTextBox Name="timeSpanTextBox" HorizontalAlignment="Left" Margin="5,5,0,0" Width="200"/>
							<TextBlock Margin="5,0,0,5" Text="{Binding #timeSpanTextBox.Value, StringFormat={}Time span: {0}}"/>

							<abControls:IPAddressTextBox Name="ipAddressTextBox" HorizontalAlignment="Left" Margin="5,5,0,0" Width="200"/>
							<TextBlock Margin="5,0,0,5" Text="{Binding #ipAddressTextBox.Object, StringFormat={}IPAddress: {0}}"/>

							<abControls:UriTextBox Name="uriTextBox" HorizontalAlignment="Left" Margin="5" Width="200"/>

							<Border Background="{DynamicResource Brush/WorkingArea.Panel.Background}" Height="50"/>

						</StackPanel>
					</ScrollViewer>

				</appControls:TabItem>

				<appControls:TabItem>
					<TabItem.Header>
						<TextBlock Text="Expander"/>
					</TabItem.Header>
					<StackPanel Background="{DynamicResource Brush/WorkingArea.Panel.Background}">
						<Expander HorizontalAlignment="Left" Margin="10" Width="200">
							<Expander.Header>
								<TextBlock HorizontalAlignment="Right" Text="Expander"/>
							</Expander.Header>
							<StackPanel>
								<TextBox Margin="5"/>
								<Button Content="Button" Margin="30,10,0,0"/>
							</StackPanel>
						</Expander>
						<Expander Background="{x:Null}" Header="Expander" HorizontalAlignment="Left" Margin="10" Padding="0" Width="200">
							<Border BorderBrush="{DynamicResource Brush/Control.Border}" BorderThickness="{DynamicResource Thickness/Control.Border}" CornerRadius="{DynamicResource ControlCornerRadiusBottom}">
								<Button Content="Button" Margin="30"/>
							</Border>
						</Expander>
						<Expander Header="Expander" ExpandDirection="Up" HorizontalAlignment="Left" Margin="10" Width="200">
							<Button Content="Button" Margin="30"/>
						</Expander>
						<Expander Header="Disabled" HorizontalAlignment="Left" IsEnabled="False" Margin="10" Width="200">
							<Button Content="Button" Margin="30"/>
						</Expander>
						<Expander Header="Disabled" HorizontalAlignment="Left" IsEnabled="False" IsExpanded="True" Margin="10" Width="200">
							<Button Content="Button" Margin="30"/>
						</Expander>
					</StackPanel>
				</appControls:TabItem>

				<appControls:TabItem>
					<TabItem.Header>
						<TextBlock Text="TreeView"/>
					</TabItem.Header>
					<StackPanel Background="{DynamicResource Brush/WorkingArea.Panel.Background}" Orientation="Horizontal">
						<TreeView Margin="10" Width="200">
							<TreeViewItem>
								<TreeViewItem.Header>
									<Grid ColumnDefinitions="Auto,*">
										<appControls:Image Classes="TreeViewItem_Icon" Grid.Column="0">
											<DrawingImage>
												<GeometryDrawing Brush="{Binding #text.Foreground}" Geometry="{StaticResource Geometry/Icon.Information.Outline}"/>
											</DrawingImage>
										</appControls:Image>
										<TextBlock Name="text" Classes="TreeViewItem_TextBlock" Grid.Column="1" Text="Item 1-1"/>
									</Grid>
								</TreeViewItem.Header>
								<TreeViewItem Header="Item 2-1"/>
								<TreeViewItem Header="Item 2-2"/>
							</TreeViewItem>
							<TreeViewItem Header="Item 1-2">
								<TreeViewItem Header="Item 2-1"/>
								<TreeViewItem Header="Item 2-2">
									<TreeViewItem Header="Item 3-1"/>
									<TreeViewItem Header="Item 3-2"/>
								</TreeViewItem>
								<TreeViewItem Header="Item 2-3" IsEnabled="False"/>
							</TreeViewItem>
						</TreeView>
					</StackPanel>
				</appControls:TabItem>

				<appControls:TabItem>
					<TabItem.Header>
						<TextBlock Text="GroupBox"/>
					</TabItem.Header>
					<StackPanel Background="{DynamicResource Brush/WorkingArea.Panel.Background}">
						<appControls:GroupBox Header="GroupBox" HorizontalAlignment="Left" Margin="10" Width="200">
							<Button Content="Button"/>
						</appControls:GroupBox>
						<appControls:GroupBox Background="{x:Null}" Header="GroupBox" HorizontalAlignment="Left" Margin="10" Width="200">
							<Button Content="Button"/>
						</appControls:GroupBox>
						<appControls:GroupBox Header="Disabled" HorizontalAlignment="Left" IsEnabled="False" Margin="10" Width="200">
							<Button Content="Button"/>
						</appControls:GroupBox>
					</StackPanel>
				</appControls:TabItem>

				<appControls:TabItem>
					<TabItem.Header>
						<TextBlock Text="ToolBar"/>
					</TabItem.Header>
					<DockPanel Background="{DynamicResource Brush/WorkingArea.Background}">
						
						<Border Classes="ToolBar" BorderBrush="{DynamicResource Brush/ToolBar.Border}" BorderThickness="0,0,1,0" DockPanel.Dock="Left" HorizontalAlignment="Left" ZIndex="1">
							<appControls:ToolBarScrollViewer HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Visible">
								<StackPanel Background="{x:Static Brushes.Transparent}">
									<Button Classes="ToolBar_Button">
										<Image Classes="Icon" Source="{StaticResource Image/Icon.AddFile}"/>
									</Button>
									<Button Classes="ToolBar_Button">
										<Image Classes="Icon" Source="{StaticResource Image/Icon.OpenFile}"/>
									</Button>
									<Button Classes="ToolBar_Button">
										<Image Classes="Icon" Source="{StaticResource Image/Icon.Save}"/>
									</Button>
									<Button Classes="ToolBar_Button">
										<Image Classes="Icon" Source="{StaticResource Image/Icon.SaveAll}"/>
									</Button>
									<Separator Classes="ToolBar_Separator_Horizontal"/>
									<Button Classes="ToolBar_Button">
										<Image Classes="Icon" Source="{StaticResource Image/Icon.More}"/>
									</Button>
								</StackPanel>
							</appControls:ToolBarScrollViewer>
						</Border>
						
						<Border Classes="ToolBar_Small" BorderBrush="{DynamicResource Brush/ToolBar.Border}" BorderThickness="0,0,1,0" DockPanel.Dock="Left" HorizontalAlignment="Left" ZIndex="1">
							<appControls:ToolBarScrollViewer HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Visible">
								<StackPanel Background="{x:Static Brushes.Transparent}">
									<Button Classes="ToolBar_Button_Small">
										<Image Classes="Icon" Source="{StaticResource Image/Icon.AddFile}"/>
									</Button>
									<Button Classes="ToolBar_Button_Small">
										<Image Classes="Icon" Source="{StaticResource Image/Icon.OpenFile}"/>
									</Button>
									<Button Classes="ToolBar_Button_Small">
										<Image Classes="Icon" Source="{StaticResource Image/Icon.Save}"/>
									</Button>
									<Button Classes="ToolBar_Button_Small">
										<Image Classes="Icon" Source="{StaticResource Image/Icon.SaveAll}"/>
									</Button>
									<Separator Classes="ToolBar_Separator_Horizontal_Small"/>
									<Button Classes="ToolBar_Button_Small">
										<Image Classes="Icon" Source="{StaticResource Image/Icon.More}"/>
									</Button>
								</StackPanel>
							</appControls:ToolBarScrollViewer>
						</Border>
						
						<Border Classes="ToolBar" DockPanel.Dock="Top" Height="50" VerticalAlignment="Top" ZIndex="0">
							
						</Border>
						
						<Border ClipToBounds="True">
							<Border BoxShadow="{DynamicResource BoxShadows/Shadow.Inner.Light}" Margin="0,0,-100,-100"/>
						</Border>
						
					</DockPanel>
				</appControls:TabItem>

				<appControls:TabItem>
					<TabItem.Header>
						<TextBlock Text="Tutorial"/>
					</TabItem.Header>
					<Panel>
						<StackPanel HorizontalAlignment="Left" Orientation="Horizontal" VerticalAlignment="Top">
							<Button Content="Show Tutorial" Command="{Binding $parent[Window].ShowTutorialCommand}" CommandParameter="{Binding $self}" Margin="10" VerticalAlignment="Center"/>
							<TextBlock Name="tutorialAnchorTextBlock" Margin="20,10,10,10" Text="Anchor" VerticalAlignment="Center"/>
						</StackPanel>
						<Button Content="Show Tutorial" Command="{Binding $parent[Window].ShowTutorialCommand}" CommandParameter="{Binding $self}" HorizontalAlignment="Left" Margin="10,10,10,80" VerticalAlignment="Center"/>
						<Button Content="Show Tutorial" Command="{Binding $parent[Window].ShowTutorialCommand}" CommandParameter="{Binding $self}" HorizontalAlignment="Left" Margin="10" VerticalAlignment="Bottom"/>
						<Button Content="Show Tutorial" Command="{Binding $parent[Window].ShowTutorialCommand}" CommandParameter="{Binding $self}" HorizontalAlignment="Center" Margin="10,10,20,10" VerticalAlignment="Top"/>
						<Button Content="Show Tutorial" Command="{Binding $parent[Window].ShowTutorialCommand}" CommandParameter="{Binding $self}" HorizontalAlignment="Center" Margin="10" VerticalAlignment="Center"/>
						<Button Content="Show Tutorial" Command="{Binding $parent[Window].ShowTutorialCommand}" CommandParameter="{Binding $self}" HorizontalAlignment="Center" Margin="20,10,10,10" VerticalAlignment="Bottom"/>
						<Button Content="Show Tutorial" Command="{Binding $parent[Window].ShowTutorialCommand}" CommandParameter="{Binding $self}" HorizontalAlignment="Right" Margin="10" VerticalAlignment="Top"/>
						<Button Content="Show Tutorial" Command="{Binding $parent[Window].ShowTutorialCommand}" CommandParameter="{Binding $self}" HorizontalAlignment="Right" Margin="10,80,10,10" VerticalAlignment="Center"/>
						<Button Content="Show Tutorial" Command="{Binding $parent[Window].ShowTutorialCommand}" CommandParameter="{Binding $self}" HorizontalAlignment="Right" Margin="10" VerticalAlignment="Bottom"/>
					</Panel>
				</appControls:TabItem>

				<appControls:TabItem>
					<TabItem.Header>
						<TextBlock Text="Images"/>
					</TabItem.Header>
					<Grid ColumnDefinitions="200,Auto,*" Margin="5" RowDefinitions="Auto,5,*">
						<ListBox Grid.RowSpan="3" HorizontalAlignment="Stretch" ItemsSource="{Binding $parent[Window].ImageIdList}" SelectionChanged="OnImageIdListBoxSelectionChanged"/>
						<GridSplitter Classes="Splitter_Horizontal" Background="{DynamicResource Color/Accent.Transparent}" Grid.Column="1" Grid.RowSpan="3"/>
						<TextBox Grid.Column="2" IsReadOnly="True" Text="{Binding $parent[Window].SelectedImageId}"/>
						<StackPanel Grid.Column="2" Grid.Row="2">
							<WrapPanel>
								<Border BorderBrush="Gray" BorderThickness="1" Height="100" Margin="10" Width="100">
									<Image Classes="Icon" Source="{Binding $parent[Window].SelectedImage}"/>
								</Border>
								<Border BorderBrush="Gray" BorderThickness="1" Height="{StaticResource Double/ToolBar.Button.Icon.Size}" Margin="10" Width="{StaticResource Double/ToolBar.Button.Icon.Size}">
									<Image Classes="Icon" Source="{Binding $parent[Window].SelectedImage}"/>
								</Border>
								<Border BorderBrush="Gray" BorderThickness="1" Height="{StaticResource Double/MenuItem.Icon.Size}" Margin="10" Width="{StaticResource Double/MenuItem.Icon.Size}">
									<Image Classes="Icon" Source="{Binding $parent[Window].SelectedImage}"/>
								</Border>
								<Border BorderBrush="Gray" BorderThickness="1" Height="{StaticResource Double/InPlaceAction.IconSize}" Margin="10" Width="{StaticResource Double/InPlaceAction.IconSize}">
									<Image Classes="Icon" Source="{Binding $parent[Window].SelectedImage}"/>
								</Border>
							</WrapPanel>
							<abControls:FormattedTextBlock Arg1="{Binding $parent[Window].SelectedImage.Size.Width, FallbackValue=0}" Arg2="{Binding $parent[Window].SelectedImage.Size.Height, FallbackValue=0}" Format="{}{0:F2}x{1:F2}" Margin="10"/>
						</StackPanel>
					</Grid>
				</appControls:TabItem>

				<appControls:TabItem>
					<TabItem.Header>
						<TextBlock Text="BrowseButton"/>
					</TabItem.Header>
					<StackPanel>
						<Grid ColumnDefinitions="*,Auto" Margin="5" Width="200">
							<TextBox/>
							<Button Classes="BrowseButton" Grid.Column="1">
								<Image Classes="BrowseButtonIcon" Source="{StaticResource Image/Icon.OpenFile}"/>
							</Button>
						</Grid>
						<Grid ColumnDefinitions="*,Auto" Margin="5" Width="200">
							<TextBox Height="150"/>
							<StackPanel Grid.Column="1">
								<Button Classes="BrowseButton">
									<Image Classes="BrowseButtonIcon" Source="{StaticResource Image/Icon.Add}"/>
								</Button>
								<Separator Classes="Dialog_Separator_Small"/>
								<Button Classes="BrowseButton">
									<Image Classes="BrowseButtonIcon" Source="{StaticResource Image/Icon.Edit}"/>
								</Button>
								<Separator Classes="Dialog_Separator_Small"/>
								<Button Classes="BrowseButton">
									<Image Classes="BrowseButtonIcon" Source="{StaticResource Image/Icon.Delete}"/>
								</Button>
							</StackPanel>
						</Grid>
					</StackPanel>
				</appControls:TabItem>

				<appControls:TabItem>
					<TabItem.Header>
						<TextBlock Text="Syntax Highlighting"/>
					</TabItem.Header>
					<StackPanel>
						<appControls:SyntaxHighlightingTextBlock Name="multiLineSyntaxHighlightingTextBlock" MaxLines="2"/>
						<ScrollViewer Background="{DynamicResource Brush/WorkingArea.Background}" HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto">
							<StackPanel Margin="5">
								<Button Command="{Binding $parent[Window].OpenFileForSyntaxHighlightingTextBlocks}" Content="Open file"/>
								<appControls:SyntaxHighlightingTextBox Name="syntaxHighlightingTextBox" HorizontalAlignment="Stretch"/>
								<Separator Background="{x:Null}" Height="5"/>
								<Border BorderBrush="Blue" BorderThickness="1" HorizontalAlignment="Stretch">
									<abControls:TextBlock Name="syntaxHighlightingRefTextBlock" IsVisible="False" MaxHeight="{Binding #syntaxHighlightingTextBlock.MaxHeight}" MaxWidth="{Binding #syntaxHighlightingTextBlock.MaxWidth}" Text="{Binding #syntaxHighlightingTextBlock.Text}" TextTrimming="{Binding #syntaxHighlightingTextBlock.TextTrimming}" TextWrapping="{Binding #syntaxHighlightingTextBlock.TextWrapping}"/>
								</Border>
								<Separator Background="{x:Null}" Height="5" IsVisible="{Binding #syntaxHighlightingRefTextBlock.IsVisible}"/>
								<Border BorderBrush="LightBlue" BorderThickness="1" HorizontalAlignment="Stretch">
									<abControls:SelectableTextBlock Name="syntaxHighlightingRefTextBlock2" MaxHeight="{Binding #syntaxHighlightingTextBlock.MaxHeight}" MaxWidth="{Binding #syntaxHighlightingTextBlock.MaxWidth}" Text="{Binding #syntaxHighlightingTextBlock.Text}" TextTrimming="{Binding #syntaxHighlightingTextBlock.TextTrimming}" TextWrapping="{Binding #syntaxHighlightingTextBlock.TextWrapping}"/>
								</Border>
								<Separator Background="{x:Null}" Height="5"/>
								<Border BorderBrush="Green" BorderThickness="1" HorizontalAlignment="Stretch">
									<appControls:SyntaxHighlightingTextBlock Name="syntaxHighlightingTextBlock" IsVisible="False" Text="{Binding #syntaxHighlightingTextBox.Text}" TextTrimming="CharacterEllipsis" TextWrapping="Wrap"/>
								</Border>
								<Separator Background="{x:Null}" Height="5" IsVisible="{Binding #syntaxHighlightingTextBlock.IsVisible}"/>
								<Border BorderBrush="LightGreen" BorderThickness="1" HorizontalAlignment="Stretch">
									<appControls:SelectableSyntaxHighlightingTextBlock Name="syntaxHighlightingTextBlock2" DefinitionSet="{Binding #syntaxHighlightingTextBlock.DefinitionSet}" MaxHeight="{Binding #syntaxHighlightingTextBlock.MaxHeight}" MaxWidth="{Binding #syntaxHighlightingTextBlock.MaxWidth}" Text="{Binding #syntaxHighlightingTextBlock.Text}" TextTrimming="{Binding #syntaxHighlightingTextBlock.TextTrimming}" TextWrapping="{Binding #syntaxHighlightingTextBlock.TextWrapping}"/>
								</Border>
							</StackPanel>
						</ScrollViewer>
					</StackPanel>
				</appControls:TabItem>

				<appControls:TabItem Header="Markdown">
					<appControls:MarkdownViewer HorizontalScrollBarVisibility="Disabled" Margin="10" Source="avares://CarinaStudio.AppSuite.Tests/Document.md"/>
				</appControls:TabItem>

				<appControls:TabItem Classes="EmptyWithSeparator">
					<TabItem.Header>
						<Button Classes="AddTabItem">
							<Image Classes="Icon" Source="{DynamicResource Image/Icon.Add}"/>
						</Button>
					</TabItem.Header>
				</appControls:TabItem>

			</appControls:TabControl>
			
			<Border Classes="Shadow_Top_Light" VerticalAlignment="Bottom"/>
			
			<appControls:NotificationPresenter Name="notificationPresenter"/>
			
		</Panel>
		
	</DockPanel>

	
	
</Window>
